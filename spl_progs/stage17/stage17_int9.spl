[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13]=SP;
SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512-1;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=9;
alias userSP R0;
alias fileName R1;
userSP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
fileName=[[PTBR+2*(userSP-4)/512]*512+(userSP-4)%512];
alias i R2;
alias index R3;
alias flag R4;
flag=1;
i=0;
while(i<MAX_FILE_NUM)do
	if([INODE_TABLE+i*16]==EXEC && [INODE_TABLE+i*16+1]==fileName)then
		index=i;
		flag=0;
		break;
	endif;
i=i+1;
endwhile;
if(flag==1)then
	[[PTBR+2*(userSP-1)/512]*512+(userSP-1)%512]=-1;
	SP=userSP;
	ireturn;
endif;
[[PTBR+2*(userSP-1)/512]*512+(userSP-1)%512]=0;
alias functionNum R1;
alias pid R2;
backup;
functionNum=3;
pid=[SYSTEM_STATUS_TABLE+1];
call MOD_1;
restore;
alias user_page R5;
user_page=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11];
[MEMORY_FREE_LIST+user_page]=[MEMORY_FREE_LIST+user_page]+1;
[SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]-1;
SP=user_page*512-1;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+4]=RUNNING;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+7]=index;
PTBR=PAGE_TABLE_BASE+20*[SYSTEM_STATUS_TABLE+1];
[PTBR+0]=63;                 //library
[PTBR+1]="0100";
[PTBR+2]=64;
[PTBR+3]="0100";
backup;
R1=GET_FREE_PAGE;             //heap
call MOD_2;
[PTBR+4]=R0;
[PTBR+5]="0110";
R1=GET_FREE_PAGE;
call MOD_2;
[PTBR+6]=R0;
[PTBR+7]="0110";
R1=GET_FREE_PAGE;              //stack
call MOD_2;
[PTBR+16]=R0;
[PTBR+17]="0110";
R1=GET_FREE_PAGE;
call MOD_2;
[PTBR+18]=R0;
[PTBR+19]="0110";
R1=GET_FREE_PAGE;               //code
call MOD_2;
[PTBR+8]=R0;
[PTBR+9]="0100";
R1=GET_FREE_PAGE;
call MOD_2;
[PTBR+10]=R0;
[PTBR+11]="0100";
R1=GET_FREE_PAGE;
call MOD_2;
[PTBR+12]=R0;
[PTBR+13]="0100";
R1=GET_FREE_PAGE;
call MOD_2;
[PTBR+14]=R0;
[PTBR+15]="0100";
restore;
if([INODE_TABLE+index*16+8]!=-1) then	
	loadi([PTBR+8],[INODE_TABLE+index*16+8]);
endif;

if([INODE_TABLE+index*16+9]!=-1) then
	loadi([PTBR+10],[INODE_TABLE+index*16+9]);
endif;

if([INODE_TABLE+index*16+10]!=-1) then
	loadi([PTBR+12],[INODE_TABLE+index*16+10]);
endif;

if([INODE_TABLE+index*16+11]!=-1) then
	loadi([PTBR+14],[INODE_TABLE+index*16+11]);
endif;
[[PTBR+16]*512] = [[PTBR+8]*512+1];
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
SP = 8*512;
ireturn;




